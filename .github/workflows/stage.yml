name: Stage

on: 
  # push:
  #    branches:
  #      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:
    name: Build in Stage
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'Stage' || 'Dev' }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Maven test
        run: mvn test
  
      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Sonar Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar 
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
              -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
              -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
              
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
  
  publish_to_ecr:   
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'Stage' || 'Dev' }}
    env:
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Create Jar File
        run: mvn -B package --file pom.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  deploy_to_EKS:
    needs: publish_to_ecr
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'Stage' || 'Dev' }}
    env:
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Login to ECR
        id: logintoECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ env.ECR_REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          chart-path: helm/sampleappcharts
          namespace: default
          values: appimage=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: sampleapp-stack
      
      - name: Delete earlier Secret if present
        if: steps.logintoECR.outcome == 'success'
        run: kubectl delete secret regcred
  
  tagthebuild:
    needs: deploy_to_EKS
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: ${{ github.ref == 'refs/heads/main' && 'Stage' || 'Dev' }}
    env:
      TAG_VALUE: S-v${{ github.run_number }}

    steps: 
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git with GitHub token
        run: |
          git config --global user.name "${{ github.actor }}"
          git remote set-url origin "https://github.com/${{ github.repository }}"

      - name: Create tag
        id: create-tag
        run: |
          git tag -a ${{ env.TAG_VALUE }} -m "Stage Release ${{ env.TAG_VALUE }}"
          git push --tags

      - name: Set Environment variable with created Tag
        if: steps.create-tag.outcome == 'success'
        env:
            REPO_OWNER: ${{ github.repository_owner }}
            REPO_NAME:  ${{ github.repository }}
            TAG_VARIABLE_NAME: LAST_TAG_VERSION
            TAG_VALUE: S-v${{ github.run_number }}
            IMAGE_TAG_VARIABLE_NAME: LAST_IMAGE_TAG
            PAT_TOKEN: ${{ secrets.REPO_VAR_REST_API_TOKEN }}
        run: |
            curl -L \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.PAT_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ env.REPO_NAME }}/actions/variables/${{ env.TAG_VARIABLE_NAME }} \
              -d '{"name":"${{ env.TAG_VARIABLE_NAME }}","value":"${{ env.TAG_VALUE}}"}'
            curl -L \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.PAT_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ env.REPO_NAME }}/actions/variables/${{ env.IMAGE_TAG_VARIABLE_NAME }} \
              -d '{"name":"${{ env.IMAGE_TAG_VARIABLE_NAME }}","value":"${{ github.run_number }}"}'

            